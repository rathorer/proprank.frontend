---
import type { CollectionEntry } from "astro:content";
import { formatDate } from "utils";

interface Props {
    motiongraphic: CollectionEntry<"motionGraphics">;
}

const { motiongraphic } = Astro.props;

const { videoId, title, createdAt, titleImage } = motiongraphic.data;

const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=0&mute=0&loop=1`;
---

<div class="relative w-full h-full">
    <div
        id={`open-popup-${motiongraphic.data.videoId}`}
        class="open-popup-button group relative flex flex-col rounded-lg shadow-md transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray focus:ring-opacity-50 overflow-hidden"
    >
        <img
            src={titleImage}
            alt="YouTube Short Thumbnail"
            class="w-full h-full rounded-md object-cover group-hover:opacity-80 transition-opacity duration-300"
        />
        <div
            class="group-hover:opacity-100 transition-opacity ease-in-out absolute inset-0 m-auto w-14 h-12 bg-transparent"
        >
            <img src="/ytShorts.png" alt="" srcset="" class="w-full h-full" />
        </div>
        <div class="flex flex-col py-4 gap-2 px-4">
            <div class="text-sm text-gray">
                {formatDate(createdAt)}
            </div>
            <h2 class="text-lg font-semibold tracking-wide">
                {title}
            </h2>
        </div>
    </div>

    <div
        id={`popup-${videoId}`}
        class="modal fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75 backdrop-blur-sm transition-opacity duration-300 ease-in-out opacity-0 pointer-events-none"
        aria-modal="true"
        role="dialog"
    >
        <div
            class="modal-content-wrapper bg-neutral-900 sm:p-4 rounded-xl shadow-2xl w-full max-w-[400px] sm:max-w-[500px] lg:max-w-[300px] 2xl:max-w-[400px] transform scale-90 transition-transform duration-300 ease-in-out"
        >
            <div class="relative aspect-[9/16]">
                <iframe
                    id={`youtube-iframe-${videoId}`}
                    class="absolute top-0 left-0 w-full h-full rounded-lg border-0"
                    src=""
                    title="YouTube video player"
                    frameborder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    allowfullscreen></iframe>
            </div>
            <button
                id={`close-popup-${videoId}`}
                class="close-popup-button absolute -top-3 -right-3 sm:-top-4 sm:-right-4 mt-0 mr-0 bg-white text-black hover:bg-gray-200 rounded-full p-2 shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-400 transition-all duration-200"
                aria-label="Close modal"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        </div>
    </div>
</div>

<script is:inline define:vars={{ videoId, embedUrl }}>
    // Vanilla JavaScript for modal functionality
    const openButton = document.getElementById(`open-popup-${videoId}`);
    const closeButton = document.getElementById(`close-popup-${videoId}`);
    const modal = document.getElementById(`popup-${videoId}`);
    const iframe = document.getElementById(`youtube-iframe-${videoId}`);

    let initialLoad = true; // To prevent loading iframe src on page load

    function openModal() {
        if (modal && iframe) {
            if (initialLoad || iframe.src !== embedUrl) {
                iframe.src = embedUrl; // Set src only when opening to enable autoplay
                initialLoad = false;
            }
            modal.classList.remove("opacity-0", "pointer-events-none");
            modal.classList.add("opacity-100", "pointer-events-auto");
            modal
                .querySelector(".modal-content-wrapper")
                .classList.remove("scale-95");
            modal
                .querySelector(".modal-content-wrapper")
                .classList.add("scale-100");
            document.body.style.overflow = "hidden"; // Prevent background scrolling
        }
    }

    function closeModal() {
        if (modal && iframe) {
            modal.classList.add("opacity-0");
            modal.classList.remove("opacity-100");
            // Delay pointer-events-none to allow fade-out transition
            setTimeout(() => {
                modal.classList.add("pointer-events-none");
                modal.classList.remove("pointer-events-auto");
            }, 300); // Match transition duration

            modal
                .querySelector(".modal-content-wrapper")
                .classList.add("scale-95");
            modal
                .querySelector(".modal-content-wrapper")
                .classList.remove("scale-100");

            iframe.src = ""; // Stop video by clearing src
            document.body.style.overflow = "auto"; // Restore background scrolling
        }
    }

    if (openButton) {
        openButton.addEventListener("click", openModal);
    }

    if (closeButton) {
        closeButton.addEventListener("click", closeModal);
    }

    // Close modal on escape key press
    document.addEventListener("keydown", (event) => {
        if (
            event.key === "Escape" &&
            modal &&
            modal.classList.contains("opacity-100")
        ) {
            closeModal();
        }
    });

    // Close modal when clicking outside the content (on the backdrop)
    if (modal) {
        modal.addEventListener("click", (event) => {
            if (event.target === modal) {
                console.log(event.target);
                console.log(modal);
                // Check if the click is directly on the modal backdrop
                closeModal();
            }
        });
    }
</script>
